/* 
 *  SAESE Library     
 *  
 *  Email: vbogado@santafe-conicet.gov.ar
 *  Date : 2012
 *  Extended from DEVSSuite Libraries, which can 
 *  be found at http://acims.asu.edu/software/devs-suite
 *  
 */

package SimEnvironment.EFLibrary;

import java.awt.*;
import GenCol.*;
import view.modeling.ViewableAtomic;
import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;

public class SAEExperimentalFrame extends ViewableDigraph{
	public SAEExperimentalFrame(){
	    this("ExperimentalFrame", 10,500);
	}
	
	public SAEExperimentalFrame(String name,double int_arr_t,double observe_t){
	    super(name);
	    efConstruct(int_arr_t,observe_t);
	}
	
	public void efConstruct(double intarrt,double observet){
	
		//adding input ports
	    addInport("rtaip"); //responsibility time around ip- measure provided by each responsibility
	    addInport("procreqip");
	    addInport("rdowntimeip");
	    addInport("rfailip");
	    addInport("rrecovtimeip");
	    addInport("sip");
	    
	    //adding output ports
	    //metrics:
	    addOutport("staop");
	    addOutport("sthop");
	    addOutport("sfailsop");
	    addOutport("savailop");
	    addOutport("sunavailop");
	    
	    //request output port
	    addOutport("rop");
	
	    //creating the internal components of this coupling model
	    ViewableAtomic saeg = new SAEGenerator("SAE Generator",intarrt);
	    ViewableAtomic saea = new SAEAcceptor("SAE Acceptor", observet);
	    
	    ViewableAtomic performancestat = new SAPerformanceStat("Performance Stat");
	    ViewableAtomic availabilitystat = new SAAvailabilityStat("Availability Stat");
	    ViewableAtomic reliabilitystat = new SAReliabilityStat("Reliability Stat");
	    
	    //adding the components to the set of internal components of this coupled model
	     add(saeg);
	     add(saea);
	     add(performancestat);
	     add(availabilitystat);
	     add(reliabilitystat);
	
	     //initialize the internal state
	     initialize();
	
	     //Defining couplings:
	     //external input coupling
	     //start input port:
	     addCoupling(this,"sip",saea,"sip");
	     
	     //Performance component:
	     //processed request ip
	     addCoupling(this,"procreqip",performancestat,"procreqip");
	     //responsibility time around ip
	     addCoupling(this,"rtaip",performancestat,"rtaip");
	     
	     //Reliability component:
	     //responsibility fail ip
	     addCoupling(this,"rfailip",reliabilitystat,"rfailip");
	     
	     //Availability Component:
	     //responsibility fail ip
	     addCoupling(this,"rfailip",availabilitystat,"rfailip");
	     //responsibility downtime ip
	     addCoupling(this,"rdowntimeip",availabilitystat,"rdowntimeip");
	     //responsibility recovery time ip
	     addCoupling(this,"rrecovtimeip",availabilitystat,"rrecovtimeip");
	     
	     //external output coupling
	     //performance metrics:
	     addCoupling(performancestat,"staop",this,"staop");
	     addCoupling(performancestat,"sthop",this,"sthop");
	     //availability metrics:
	     addCoupling(availabilitystat,"savailop",this,"savailop");
	     addCoupling(availabilitystat,"sunavailop",this,"sunavailop");
	     //realizability metrics:	     
	     addCoupling(reliabilitystat,"sfailsop",this,"sfailsop");
	     
	     //requests output port
	     addCoupling(saeg,"rop",this,"rop");
	     
	     //internal coupling
	     addCoupling(saea,"ssop",availabilitystat,"ssip");
	     addCoupling(saea,"ssop",reliabilitystat,"ssip");
	     addCoupling(saea,"ssop",performancestat,"ssip");
	     addCoupling(saea,"ssop",saeg,"ssip");
	     
	     addCoupling(saeg,"rop",performancestat,"sentreqip");
	
	     
	     //testing the input ports
	     addTestInput("sip",new entity("start"));
	     
	   
	}

    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(698, 199);
        ((ViewableComponent)withName("SAE Acceptor")).setPreferredLocation(new Point(12, 116));
        ((ViewableComponent)withName("Performance Stat")).setPreferredLocation(new Point(290, 129));
        ((ViewableComponent)withName("SAE Generator")).setPreferredLocation(new Point(117, 48));
        ((ViewableComponent)withName("Availability Stat")).setPreferredLocation(new Point(284, 4));
        ((ViewableComponent)withName("Reliability Stat")).setPreferredLocation(new Point(316, 74));
    }
}
